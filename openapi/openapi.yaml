openapi: 3.0.3
info:
  title: "@kaanmertkoc/iyzico-subs-ts - SDK Documentation"
  description: |
    # üìò TypeScript SDK for Iyzico Subscriptions
    
    This is the **official SDK documentation** for `@kaanmertkoc/iyzico-subs-ts`. 
    
    **Important:** You don't need to call these API endpoints directly! The SDK handles all API communication for you. This documentation shows the available methods and their parameters.
    
    ---
    
    ## üöÄ Quick Start
    
    ### Installation
    ```bash
    npm install @kaanmertkoc/iyzico-subs-ts
    # or
    bun install @kaanmertkoc/iyzico-subs-ts
    # or
    yarn add @kaanmertkoc/iyzico-subs-ts
    # or
    pnpm add @kaanmertkoc/iyzico-subs-ts
    # or
    deno add @kaanmertkoc/iyzico-subs-ts
    ```
    
    ### Environment Variables
    
    Create a `.env` file in your project root:
    
    ```env
    # Production credentials (required)
    IYZICO_API_KEY=your_production_api_key
    IYZICO_SECRET_KEY=your_production_secret_key
    IYZICO_ENVIRONMENT=production # production or sandbox (default: production)
    
    # Sandbox credentials (optional, only if using sandbox)
    IYZICO_SANDBOX_API_KEY=your_sandbox_api_key
    IYZICO_SANDBOX_SECRET_KEY=your_sandbox_secret_key
    
    # Node environment
    NODE_ENV=development # development or production
    ```
    
    ### Basic Usage
    
    ```typescript
    import { IyzicoClient } from '@kaanmertkoc/iyzico-subs-ts';
    
    const iyzico = new IyzicoClient({
      apiKey: process.env.IYZICO_API_KEY!,
      secretKey: process.env.IYZICO_SECRET_KEY!,
      isSandbox: process.env.NODE_ENV !== 'production',
      debug: process.env.NODE_ENV === 'development' // Enable debug logging in development
    });
    
    // Create a subscription product
    const product = await iyzico.products.create({
      name: 'Premium Subscription',
      description: 'Monthly premium plan'
    });
    
    // Create a pricing plan
    const plan = await iyzico.plans.create({
      productReferenceCode: product.data.referenceCode,
      name: 'Monthly Plan',
      price: 29.99,
      currencyCode: 'TRY',
      paymentInterval: 'MONTHLY',
      paymentIntervalCount: 1,
      planPaymentType: 'RECURRING'
    });
    ```
    
    ### Configuration Options
    
    ```typescript
    new IyzicoClient({
      // Required: Your API credentials
      apiKey: string;
      secretKey: string;
      
      // Optional: Sandbox credentials (only needed if isSandbox: true)
      sandboxApiKey?: string;
      sandboxSecretKey?: string;
      
      // Optional: Environment settings
      isSandbox?: boolean;          // Use sandbox API (default: false)
      debug?: boolean;              // Enable debug logging (default: false)
                                    // Recommended: process.env.NODE_ENV === 'development'
      baseUrl?: string;             // Custom API base URL
      timeout?: number;             // Request timeout in ms (default: 30000)
      maxRetries?: number;          // Max retry attempts (default: 3)
      
      // Optional: Custom headers
      userAgent?: string;           // Custom user agent
      defaultHeaders?: Record<string, string>; // Additional headers
    });
    ```
    
    ---
    
    ## üì¶ Usage Examples
    
    ### Products
    ```typescript
    // Create a product
    const product = await iyzico.products.create({
      name: 'Premium Subscription',
      description: 'Monthly premium plan'
    });
    
    // List all products (paginated)
    const products = await iyzico.products.list();
    console.log(products.data.items); // Array of products
    console.log(products.data.totalCount); // Total number
    
    // Retrieve a product
    const product = await iyzico.products.retrieve('PROD_123');
    
    // Update a product
    const updated = await iyzico.products.update('PROD_123', {
      name: 'Updated Name',
      description: 'Updated description'
    });
    
    // Delete a product
    await iyzico.products.delete('PROD_123');
    ```
    
    ### Pricing Plans
    ```typescript
    // Create a plan
    const plan = await iyzico.plans.create('PROD_123', {
      name: 'Monthly Plan',
      price: 29.99,
      currencyCode: 'TRY',
      paymentInterval: 'MONTHLY',
      paymentIntervalCount: 1,
      planPaymentType: 'RECURRING'
    });
    
    // List plans for a product (paginated)
    const plans = await iyzico.plans.list('PROD_123', 1, 10);
    console.log(plans.data.items); // Array of plans
    ```
    
    ### Checkout & Payment
    ```typescript
    // Create 3DS checkout form (recommended for production)
    const checkout = await iyzico.checkout.initialize({
      pricingPlanReferenceCode: 'PLAN_123',
      callbackUrl: 'https://yourdomain.com/api/checkout/callback',
      clientReferenceId: 'order_12345', // Track this checkout session
      name: 'John',
      surname: 'Doe',
      email: 'john@example.com',
      gsmNumber: '+905551234567',
      identityNumber: '11111111111',
      billingAddress: {
        contactName: 'John Doe',
        country: 'Turkey',
        city: 'Istanbul',
        address: 'Example Address 123'
      },
      shippingAddress: {
        contactName: 'John Doe',
        country: 'Turkey',
        city: 'Istanbul',
        address: 'Example Address 123'
      }
    });
    
    // Display the checkout form
    const formHtml = checkout.data.checkoutFormContent;
    const clientRef = checkout.clientReferenceId; // 'order_12345'
    
    // Retrieve checkout result after payment
    const result = await iyzico.checkout.retrieve(tokenFromCallback);
    if (result.status === 'success') {
      console.log('Subscription:', result.data);
      console.log('Your reference:', result.clientReferenceId);
    }
    
    // Create NON-3DS subscription (direct payment)
    const subscription = await iyzico.checkout.initializeSubscription({
      pricingPlanReferenceCode: 'PLAN_123',
      clientReferenceId: 'order_12345',
      name: 'John',
      surname: 'Doe',
      email: 'john@example.com',
      gsmNumber: '+905551234567',
      identityNumber: '11111111111',
      paymentCard: {
        cardHolderName: 'John Doe',
        cardNumber: '5528790000000008',
        expireMonth: '12',
        expireYear: '2030',
        cvc: '123'
      },
      billingAddress: { /* ... */ },
      shippingAddress: { /* ... */ }
    });
    ```
    
    ### Subscriptions
    ```typescript
    // List subscriptions (paginated)
    const subscriptions = await iyzico.subscriptions.list(1, 10);
    console.log(subscriptions.data.items); // Array of subscriptions
    
    // Activate a subscription
    await iyzico.subscriptions.activate('SUB_123');
    
    // Cancel a subscription
    await iyzico.subscriptions.cancel('SUB_123');
    ```
    
    ---
    
    ## üåê Cross-Platform Usage
    
    The SDK works seamlessly across all modern JavaScript environments:
    
    ### Next.js API Route
    ```typescript
    // pages/api/subscriptions.ts
    import { IyzicoClient } from '@kaanmertkoc/iyzico-subs-ts';
    
    const iyzico = new IyzicoClient({
      apiKey: process.env.IYZICO_API_KEY!,
      secretKey: process.env.IYZICO_SECRET_KEY!,
      isSandbox: process.env.NODE_ENV !== 'production',
      debug: process.env.NODE_ENV === 'development'
    });
    
    export default async function handler(req, res) {
      const subscription = await iyzico.subscriptions.create(req.body);
      res.json(subscription);
    }
    ```
    
    ### Cloudflare Worker
    ```typescript
    import { IyzicoClient } from '@kaanmertkoc/iyzico-subs-ts';
    
    export default {
      async fetch(request, env) {
        const iyzico = new IyzicoClient({
          apiKey: env.IYZICO_API_KEY,
          secretKey: env.IYZICO_SECRET_KEY,
          isSandbox: env.ENVIRONMENT !== 'production'
        });
        
        const subscriptions = await iyzico.subscriptions.list();
        return Response.json(subscriptions);
      }
    };
    ```
    
    ### Vercel Edge Function
    ```typescript
    import { IyzicoClient } from '@kaanmertkoc/iyzico-subs-ts';
    
    export const config = { runtime: 'edge' };
    
    export default async function handler(request) {
      const iyzico = new IyzicoClient({
        apiKey: process.env.IYZICO_API_KEY!,
        secretKey: process.env.IYZICO_SECRET_KEY!,
        isSandbox: true
      });
      
      const result = await iyzico.health.check();
      return Response.json(result);
    }
    ```
    
    ---
    
    ## üêõ Known Issues
    
    ### 1. Plans UPDATE Endpoint - Limited Fields
    
    **Limitation**: Only `name` and `trialPeriodDays` can be updated.
    
    **Official Statement** (from Iyzico docs):
    > "Bu metod sadece name ve trialPeriodDays parametrelerinin g√ºncellenmesine izin verir."
    
    **Fields That Cannot Be Updated:**
    - ‚ùå `status` - Cannot change to INACTIVE via API
    - ‚ùå `paymentInterval` - Cannot be modified after creation  
    - ‚ùå `price` - Cannot be changed after creation
    - ‚ùå All other fields are silently ignored
    
    **Workarounds:**
    1. For price/interval changes: Create a new plan
    2. For status changes: Manage in your application layer
    
    ---
    
    ### 2. Plans DELETE Endpoint - Non-Functional
    
    **Critical Issue**: The DELETE endpoint returns `404` with `errorCode: "1"` even when the plan exists.
    
    **SDK Behavior:**
    ```typescript
    try {
      await iyzico.plans.delete('plan-id');
    } catch (error) {
      if (error.isBusinessConstraintError()) {
        console.error(error.getContextualMessage('plan', 'plan-id'));
        // "Cannot delete plan 'plan-id'. This may be due to active subscriptions..."
      }
    }
    ```
    
    **Workarounds:**
    1. Use update to mark as inactive (though status can't be changed - see above)
    2. Implement soft-delete in your application
    3. Contact Iyzico support
    
    ---
    
    ## ‚ö†Ô∏è CRITICAL: Sandbox Limitations
    
    **Iyzico's sandbox does NOT support subscription endpoints!**
    
    - ‚úÖ **Works in Sandbox:** `iyzico.health.checkBin()` only
    - ‚ùå **NOT in Sandbox:** All other methods (products, plans, subscriptions, checkout)
    
    ### Testing Strategy:
    1. Test credentials with BIN check in sandbox
    2. **Use production credentials** for subscription features
    3. Create test products with small amounts in production
    4. Mock responses for automated tests
    
    **Error:** Sandbox returns `422` with error code `100001` for subscription methods.
    
    [Read full documentation ‚Üí](https://github.com/kaanmertkoc/iyzico-subscription-ts#-sandbox-limitations)
    
    ---
    
    ## ‚ö° Error Handling
    
    The SDK provides structured error handling with user-friendly messages:
    
    ```typescript
    import { 
      IyzicoClient, 
      IyzicoApiError, 
      IyzicoNetworkError,
      IyzicoSandboxLimitationError 
    } from '@kaanmertkoc/iyzico-subs-ts';
    
    try {
      const subscription = await iyzico.subscriptions.create(data);
    } catch (error) {
      // Sandbox limitation (422 with code "100001")
      if (error instanceof IyzicoSandboxLimitationError) {
        console.error('Sandbox limitation:', error.message);
        console.error('Use production credentials for this route');
      }
      // General API errors (4xx, 5xx)
      else if (error instanceof IyzicoApiError) {
        console.error('API Error:', {
          // Basic error info
          statusCode: error.statusCode,
          errorCode: error.errorCode,
          message: error.message,
          
          // User-friendly message for displaying to end users
          userFriendlyMessage: error.getUserFriendlyMessage(),
          
          // Error classification
          category: error.getCategory(),
          isRetryable: error.isRetryable(),
          
          // Special handling for business constraints
          isBusinessConstraint: error.isBusinessConstraintError(),
          contextualMessage: error.getContextualMessage('plan', 'plan-123'),
          suggestion: error.getSuggestion('delete'),
          
          // Request details
          requestId: error.requestId,
        });
      }
      // Network errors (timeout, connection issues)
      else if (error instanceof IyzicoNetworkError) {
        console.error('Network Error:', {
          message: error.message,
          isTimeout: error.isTimeout,
          requestId: error.requestId
        });
      }
    }
    ```
    
    ### Available Error Methods
    
    All `IyzicoApiError` instances provide these helpful methods:
    - `getUserFriendlyMessage()` - Safe message for end users
    - `getCategory()` - Error category (authentication, validation, etc.)
    - `isRetryable()` - Whether to retry the request
    - `isBusinessConstraintError()` - True for business rule violations
    - `getContextualMessage(operation?, resourceId?)` - Operation-specific message
    - `getSuggestion(operation?)` - Actionable fix suggestions
    
    ### Error Types
    
    | Error Type | When It Occurs | Retryable |
    |------------|----------------|----------|
    | `IyzicoSandboxLimitationError` | Subscription routes in sandbox (422 + code "100001") | ‚ùå No - Use production |
    | `IyzicoApiError` | API validation/business logic errors (4xx/5xx) | Depends on status |
    | `IyzicoNetworkError` | Network issues, timeouts, DNS failures | ‚úÖ Yes |
    | `IyzicoConfigError` | Invalid SDK configuration | ‚ùå No - Fix configuration |
    
    ---
    
    ## üåü Features
    - ‚úÖ **Full TypeScript support** with comprehensive type definitions
    - ‚úÖ **Cross-platform compatible** - Node.js 18+, Bun, Deno, browsers, serverless
    - ‚úÖ **Zero dependencies** - uses only standard web APIs (`fetch`, `crypto`)
    - ‚úÖ **Subscription-focused** - specifically designed for Iyzico's subscription routes
    - ‚úÖ **Modern ESM/CJS** - ships with both module formats
    - ‚úÖ **Comprehensive error handling** - structured errors with user-friendly messages
    - ‚úÖ **Built-in authentication** - automatic HMAC-SHA256 signature generation
    - ‚úÖ **Production ready** - used in production applications
    
    ## üîó Links
    - [GitHub Repository](https://github.com/kaanmertkoc/iyzico-subscription-ts)
    - [NPM Package](https://www.npmjs.com/package/@kaanmertkoc/iyzico-subs-ts)
    - [Interactive Docs](https://iyzico-docs.kaanmertkoc.com)
    - [Example Hono App](https://github.com/kaanmertkoc/iyzico-subscription-ts/tree/main/examples/hono-app)
    
    ---
    
    ## üìñ About This Documentation
    
    This OpenAPI specification documents the SDK methods you'll use. The endpoints shown are the underlying Iyzico API routes, but you'll interact with them through the SDK's clean interface (e.g., `iyzico.products.create()` instead of manually calling `/v2/subscription/products`).
  version: 1.0.5
  contact:
    name: Kaan Mert Ko√ß
    url: https://github.kaanmertkoc.com
    email: kaanmertkocbus@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.iyzipay.com
    description: Production server (‚úÖ All endpoints work)
  - url: https://sandbox-api.iyzipay.com
    description: Sandbox server (‚ö†Ô∏è Only /payment/bin/check works. Subscription routes NOT available)

security:
  - IyzicoAuth: []

tags:
  - name: Products
    description: |
      **SDK Methods:** `iyzico.products.create()` ¬∑ `list()` ¬∑ `retrieve()` ¬∑ `update()` ¬∑ `delete()`
      
      Create and manage subscription products. Products are containers for pricing plans.
      
      ```typescript
      // Create a product
      const product = await iyzico.products.create({
        name: 'Premium Plan',
        description: 'Monthly premium subscription'
      });
      
      // List with pagination
      const { data } = await iyzico.products.list();
      data.items.forEach(product => console.log(product.name));
      console.log(`Total: ${data.totalCount}`);
      ```
  - name: Plans
    description: |
      **SDK Methods:** `iyzico.plans.create()` ¬∑ `list()` ¬∑ `retrieve()` ¬∑ `update()` ¬∑ `delete()`
      
      Manage pricing plans for products. Define price, billing interval, and trial periods.
      
      ```typescript
      // Create a pricing plan
      const plan = await iyzico.plans.create('PROD_123', {
        name: 'Monthly Plan',
        price: 29.99,
        currencyCode: 'TRY',
        paymentInterval: 'MONTHLY',
        paymentIntervalCount: 1,
        planPaymentType: 'RECURRING',
        trialPeriodDays: 7
      });
      ```
  - name: Subscriptions
    description: |
      **SDK Methods:** `iyzico.subscriptions.list()` ¬∑ `retrieve()` ¬∑ `activate()` ¬∑ `cancel()` ¬∑ `upgrade()` ¬∑ `retry()`
      
      Manage customer subscriptions lifecycle: activate, cancel, upgrade, and retry failed payments.
      
      ```typescript
      // Activate a pending subscription
      await iyzico.subscriptions.activate('SUB_123');
      
      // List with pagination
      const { data } = await iyzico.subscriptions.list(1, 10);
      console.log(`${data.items.length} of ${data.totalCount} subscriptions`);
      ```
  - name: Customers
    description: |
      **SDK Methods:** `iyzico.customers.list()` ¬∑ `retrieve()` ¬∑ `update()`
      
      Manage customer information, billing and shipping addresses.
      
      ```typescript
      // List customers with pagination
      const { data } = await iyzico.customers.list();
      data.items.forEach(customer => {
        console.log(`${customer.name} - ${customer.email}`);
      });
      ```
  - name: Checkout
    description: |
      **SDK Methods:** `iyzico.checkout.initialize()` ¬∑ `retrieve()` ¬∑ `initializeSubscription()` ¬∑ `initializeCardUpdate()`
      
      Create checkout forms and initialize subscriptions with payment cards (3DS and non-3DS).
      
      ```typescript
      // Initialize 3DS checkout form
      const checkout = await iyzico.checkout.initialize({
        pricingPlanReferenceCode: 'PLAN_123',
        callbackUrl: 'https://yoursite.com/callback',
        // ... customer details
      });
      ```
  - name: Health
    description: |
      **SDK Method:** `iyzico.health.checkBin()`
      
      Validate card BIN numbers and check API connectivity. ‚úÖ **Works in sandbox!**
      
      ```typescript
      // Check card BIN
      const binInfo = await iyzico.health.checkBin('554960');
      console.log(binInfo.data.bankName); // 'ƒ∞≈ü Bankasƒ±'
      console.log(binInfo.data.cardType); // 'CREDIT_CARD'
      ```

paths:
  # ==================== PRODUCTS ====================
  /v2/subscription/products:
    get:
      tags: [Products]
      summary: "SDK: iyzico.products.list()"
      operationId: listProducts
      description: |
        Lists all subscription products with pagination support.
        
        **SDK Usage:**
        ```typescript
        const response = await iyzico.products.list();
        
        console.log(response.data.items);      // Array of products
        console.log(response.data.totalCount); // Total count
        console.log(response.data.currentPage); // Current page
        console.log(response.data.pageCount);  // Total pages
        ```
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags: [Products]
      summary: "SDK: iyzico.products.create()"
      operationId: createProduct
      description: |
        Creates a new subscription product.
        
        **SDK Usage:**
        ```typescript
        const product = await iyzico.products.create({
          name: 'Premium Subscription',
          description: 'Monthly premium plan'
        });
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '200':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v2/subscription/products/{referenceCode}:
    get:
      tags: [Products]
      summary: "SDK: iyzico.products.retrieve()"
      operationId: retrieveProduct
      description: |
        Retrieves a specific product by its reference code.
        
        **SDK Usage:**
        ```typescript
        const product = await iyzico.products.retrieve('PROD_123');
        ```
      parameters:
        - $ref: '#/components/parameters/ReferenceCode'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    post:
      tags: [Products]
      summary: "SDK: iyzico.products.update()"
      operationId: updateProduct
      description: |
        Updates an existing product.
        
        **SDK Usage:**
        ```typescript
        const updated = await iyzico.products.update('PROD_123', {
          name: 'Updated Premium',
          description: 'Updated description'
        });
        ```
      parameters:
        - $ref: '#/components/parameters/ReferenceCode'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    delete:
      tags: [Products]
      summary: "SDK: iyzico.products.delete()"
      operationId: deleteProduct
      description: |
        Deletes a product by its reference code.
        
        **SDK Usage:**
        ```typescript
        await iyzico.products.delete('PROD_123');
        ```
      parameters:
        - $ref: '#/components/parameters/ReferenceCode'
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ==================== PLANS ====================
  /v2/subscription/products/{productReferenceCode}/pricing-plans:
    get:
      tags: [Plans]
      summary: "SDK: iyzico.plans.list()"
      operationId: listPlans
      description: |
        Lists all pricing plans for a product with pagination.
        
        **SDK Usage:**
        ```typescript
        const response = await iyzico.plans.list('PROD_123', 1, 10);
        
        console.log(response.data.items);      // Array of plans
        console.log(response.data.totalCount); // Total count
        ```
      parameters:
        - name: productReferenceCode
          in: path
          required: true
          schema:
            type: string
          description: Product reference code
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number
        - name: count
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Items per page
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanListResponse'
    
    post:
      tags: [Plans]
      summary: "SDK: iyzico.plans.create()"
      operationId: createPlan
      description: |
        Creates a new pricing plan for a product.
        
        **SDK Usage:**
        ```typescript
        const plan = await iyzico.plans.create('PROD_123', {
          name: 'Monthly Plan',
          price: 29.99,
          currencyCode: 'TRY',
          paymentInterval: 'MONTHLY',
          paymentIntervalCount: 1,
          planPaymentType: 'RECURRING',
          trialPeriodDays: 7
        });
        ```
      parameters:
        - name: productReferenceCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlanRequest'
      responses:
        '200':
          description: Plan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanResponse'

  /v2/subscription/pricing-plans/{pricingPlanReferenceCode}:
    get:
      tags: [Plans]
      summary: Retrieve a pricing plan
      operationId: retrievePlan
      parameters:
        - name: pricingPlanReferenceCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanResponse'
    
    post:
      tags: [Plans]
      summary: "‚ö†Ô∏è Update a pricing plan (LIMITED FIELDS)"
      operationId: updatePlan
      description: |
        **‚ö†Ô∏è LIMITATION: Only `name` and `trialPeriodDays` can be updated**
        
        According to Iyzico's official documentation:
        > "Bu metod sadece name ve trialPeriodDays parametrelerinin g√ºncellenmesine izin verir."
        > (This method only allows updating the name and trialPeriodDays parameters.)
        
        **Fields That CAN be updated:**
        - ‚úÖ `name` - The display name of the plan
        - ‚úÖ `trialPeriodDays` - The trial period duration
        
        **Fields That CANNOT be updated (silently ignored):**
        - ‚ùå `status` - Cannot change to INACTIVE via API
        - ‚ùå `paymentInterval` - Cannot be modified after creation
        - ‚ùå `price` - Cannot be changed after creation
        - ‚ùå `currencyCode` - Cannot be changed after creation
        - ‚ùå `recurrenceCount` - Cannot be changed after creation
        - ‚ùå `planPaymentType` - Cannot be changed after creation
        
        **SDK Usage:**
        ```typescript
        // ‚úÖ This works - updates name and trialPeriodDays
        await iyzico.plans.update('plan-id', {
          name: 'New Plan Name',
          trialPeriodDays: 14
        });
        
        // ‚ùå These fields will be ignored by Iyzico API
        await iyzico.plans.update('plan-id', {
          status: 'INACTIVE',        // Ignored
          paymentInterval: 'YEARLY',  // Ignored
          price: 99.99                // Ignored
        });
        ```
        
        **Workarounds:**
        - For price/interval changes: Create a new plan and migrate subscriptions
        - For status changes: Manage availability in your application layer
        
        **Note:** Active subscriptions are not affected by plan updates.
      parameters:
        - name: pricingPlanReferenceCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlanRequest'
            example:
              pricingPlanReferenceCode: "plan-ref-code-123"
              name: "Updated Plan Name"
              trialPeriodDays: 14
      responses:
        '200':
          description: Plan updated successfully (only name and trialPeriodDays are actually updated)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanResponse'
    
    delete:
      tags: [Plans]
      summary: "‚ö†Ô∏è Delete a pricing plan (NON-FUNCTIONAL)"
      operationId: deletePlan
      deprecated: true
      description: |
        **üêõ KNOWN ISSUE: This endpoint appears to be non-functional in Iyzico's API**
        
        This endpoint consistently returns:
        - Status: `404`
        - Error Code: `"1"` (System error)
        - Error Message: "Sistem hatasƒ±"
        
        This occurs even when the plan **exists** and is confirmed via GET/LIST endpoints.
        
        **Workarounds:**
        1. **Recommended**: Use the update endpoint to mark plans as inactive
        2. Implement soft-delete in your application layer
        3. Contact Iyzico support to report this issue
        
        **SDK Behavior:**
        ```typescript
        try {
          await iyzico.plans.delete('plan-id');
        } catch (error) {
          // Will throw IyzicoApiError with:
          // - statusCode: 404
          // - errorCode: "1"
          // - isBusinessConstraintError(): true
          
          console.error(error.getContextualMessage('plan', 'plan-id'));
          // "Cannot delete plan 'plan-id'. This may be due to: 
          //  active subscriptions using it, plan status restrictions, 
          //  or other business rules."
          
          console.error(error.getSuggestion('delete'));
          // "Check for active subscriptions using this plan..."
        }
        ```
        
        See [GitHub Issues](https://github.com/kaanmertkoc/iyzico-subscription-ts/issues) to track this issue.
      parameters:
        - name: pricingPlanReferenceCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Plan deleted successfully (‚ö†Ô∏è This response is theoretical - endpoint not functional)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '404':
          description: |
            **Known Issue**: Returns 404 even when plan exists.
            This indicates the endpoint is not properly implemented on Iyzico's side.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  errorCode:
                    type: string
                    example: "1"
                  errorMessage:
                    type: string
                    example: "System error"
                  systemTime:
                    type: integer
                    example: 1760035962892
                  locale:
                    type: string
                    example: "tr"

  # ==================== SUBSCRIPTIONS ====================
  /v2/subscription/subscriptions:
    get:
      tags: [Subscriptions]
      summary: "SDK: iyzico.subscriptions.list()"
      operationId: listSubscriptions
      description: |
        Lists all subscriptions with pagination.
        
        **SDK Usage:**
        ```typescript
        const response = await iyzico.subscriptions.list(1, 10);
        
        console.log(response.data.items);      // Array of subscriptions
        console.log(response.data.totalCount); // Total count
        ```
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: count
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionListResponse'

  /v2/subscription/subscriptions/{subscriptionReferenceCode}:
    get:
      tags: [Subscriptions]
      summary: Retrieve a subscription
      operationId: retrieveSubscription
      parameters:
        - name: subscriptionReferenceCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'

  /v2/subscription/subscriptions/{subscriptionReferenceCode}/activate:
    post:
      tags: [Subscriptions]
      summary: Activate a subscription
      operationId: activateSubscription
      description: Activates a pending subscription
      parameters:
        - name: subscriptionReferenceCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conversationId:
                  type: string
      responses:
        '200':
          description: Subscription activated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'

  /v2/subscription/subscriptions/{subscriptionReferenceCode}/cancel:
    post:
      tags: [Subscriptions]
      summary: Cancel a subscription
      operationId: cancelSubscription
      parameters:
        - name: subscriptionReferenceCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conversationId:
                  type: string
      responses:
        '200':
          description: Subscription cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'

  /v2/subscription/subscriptions/{subscriptionReferenceCode}/upgrade:
    post:
      tags: [Subscriptions]
      summary: Upgrade a subscription
      operationId: upgradeSubscription
      parameters:
        - name: subscriptionReferenceCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradeSubscriptionRequest'
      responses:
        '200':
          description: Subscription upgraded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'

  /v2/subscription/operation/retry:
    post:
      tags: [Subscriptions]
      summary: "SDK: iyzico.subscriptions.retry()"
      operationId: retrySubscription
      description: |
        Retries a failed subscription payment.
        
        **SDK Usage:**
        ```typescript
        // referenceCode is the orderReferenceCode from webhook notification
        await iyzico.subscriptions.retry('order-ref-from-webhook');
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - referenceCode
              properties:
                referenceCode:
                  type: string
                  description: The orderReferenceCode from the failed payment webhook notification
      responses:
        '200':
          description: Payment retry initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'

  # ==================== CUSTOMERS ====================
  /v2/subscription/customers:
    get:
      tags: [Customers]
      summary: "SDK: iyzico.customers.list()"
      operationId: listCustomers
      description: |
        Lists all customers with pagination support.
        
        **SDK Usage:**
        ```typescript
        const response = await iyzico.customers.list(1, 10);
        
        console.log(response.data.items);      // Array of customers
        console.log(response.data.totalCount); // Total count
        console.log(response.data.currentPage); // Current page
        console.log(response.data.pageCount);  // Total pages
        ```
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number
        - name: count
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Items per page
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v2/subscription/customers/{customerReferenceCode}:
    get:
      tags: [Customers]
      summary: "SDK: iyzico.customers.retrieve()"
      operationId: retrieveCustomer
      description: |
        Retrieves a specific customer by reference code.
        
        **SDK Usage:**
        ```typescript
        const customer = await iyzico.customers.retrieve('CUST_123');
        console.log(customer.data.email);
        ```
      parameters:
        - name: customerReferenceCode
          in: path
          required: true
          schema:
            type: string
          description: Customer reference code
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    post:
      tags: [Customers]
      summary: "SDK: iyzico.customers.update()"
      operationId: updateCustomer
      description: |
        Updates an existing customer. All fields are optional.
        
        **SDK Usage:**
        ```typescript
        const updated = await iyzico.customers.update('CUST_123', {
          name: 'Updated Name',
          email: 'newemail@example.com',
          billingAddress: {
            contactName: 'John Doe',
            country: 'Turkey',
            city: 'Istanbul',
            address: 'New Address 456'
          }
        });
        ```
        
        **Note:** Unlike other endpoints, customer update does NOT require `conversationId`.
      parameters:
        - name: customerReferenceCode
          in: path
          required: true
          schema:
            type: string
          description: Customer reference code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ==================== CHECKOUT ====================
  /v2/subscription/checkoutform/initialize:
    post:
      tags: [Checkout]
      summary: Initialize checkout form
      operationId: initializeCheckout
      description: Creates a checkout form for subscription payment (3DS)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitializeCheckoutRequest'
      responses:
        '200':
          description: Checkout form created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutFormResponse'

  /v2/subscription/checkoutform/{token}:
    post:
      tags: [Checkout]
      summary: Retrieve checkout result
      operationId: retrieveCheckout
      description: Retrieves the result of a checkout form using the callback token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conversationId:
                  type: string
                token:
                  type: string
      responses:
        '200':
          description: Checkout result retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionInitResponse'

  /v2/subscription/initialize:
    post:
      tags: [Checkout]
      summary: Initialize subscription (NON-3DS)
      operationId: initializeSubscription
      description: Creates a subscription directly with payment card (non-3DS)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitializeSubscriptionRequest'
      responses:
        '200':
          description: Subscription initialized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionInitResponse'

  /v2/subscription/card-update/checkoutform/initialize:
    post:
      tags: [Checkout]
      summary: Initialize card update
      operationId: initializeCardUpdate
      description: Creates a checkout form for updating payment card
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardUpdateRequest'
      responses:
        '200':
          description: Card update form created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutFormResponse'

  # ==================== HEALTH ====================
  /payment/bin/check:
    post:
      tags: [Health]
      summary: Check card BIN
      operationId: checkBin
      description: Validates and retrieves information about a card BIN number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BinCheckRequest'
      responses:
        '200':
          description: BIN check successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BinCheckResponse'

components:
  securitySchemes:
    IyzicoAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        Iyzico uses HMAC-SHA256 authentication. The SDK automatically handles this.
        
        Format: `IYZWSv2 {base64(apiKey:randomKey:signature)}`

  parameters:
    ReferenceCode:
      name: referenceCode
      in: path
      required: true
      schema:
        type: string
      description: Unique reference code

  schemas:
    # ==================== BASE SCHEMAS ====================
    BaseRequest:
      type: object
      properties:
        locale:
          type: string
          enum: [tr, en]
          default: tr
          description: Locale for the request
        conversationId:
          type: string
          description: Unique identifier for tracking the request

    BaseResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, failure]
        locale:
          type: string
        systemTime:
          type: integer
          format: int64
        conversationId:
          type: string
        errorCode:
          type: string
        errorMessage:
          type: string
        errorGroup:
          type: string

    SimpleResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'

    Address:
      type: object
      required:
        - contactName
        - country
        - city
        - address
      properties:
        contactName:
          type: string
        country:
          type: string
        city:
          type: string
        address:
          type: string
        zipCode:
          type: string

    Customer:
      type: object
      required:
        - name
        - surname
        - email
      properties:
        name:
          type: string
        surname:
          type: string
        email:
          type: string
          format: email
        gsmNumber:
          type: string
        identityNumber:
          type: string
        billingAddress:
          $ref: '#/components/schemas/Address'
        shippingAddress:
          $ref: '#/components/schemas/Address'

    PaymentCard:
      type: object
      properties:
        cardHolderName:
          type: string
        cardNumber:
          type: string
        expireMonth:
          type: string
        expireYear:
          type: string
        cvc:
          type: string
        registerConsumerCard:
          type: boolean
        cardToken:
          type: string
        consumerToken:
          type: string
        ucsToken:
          type: string

    # ==================== PRODUCT SCHEMAS ====================
    ProductData:
      type: object
      properties:
        referenceCode:
          type: string
        createdDate:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [ACTIVE, INACTIVE]
        pricingPlans:
          type: array
          items:
            $ref: '#/components/schemas/PricingPlan'

    CreateProductRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          required:
            - name
          properties:
            name:
              type: string
              minLength: 1
              maxLength: 255
            description:
              type: string
              maxLength: 500

    UpdateProductRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          required:
            - productReferenceCode
            - name
          properties:
            productReferenceCode:
              type: string
            name:
              type: string
            description:
              type: string

    ProductResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ProductData'

    ProductListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                currentPage:
                  type: integer
                pageCount:
                  type: integer
                totalCount:
                  type: integer
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/ProductData'

    # ==================== PLAN SCHEMAS ====================
    PricingPlan:
      type: object
      properties:
        referenceCode:
          type: string
        name:
          type: string
        price:
          type: number
        currencyCode:
          type: string
          enum: [TRY, USD, EUR, GBP]
        paymentInterval:
          type: string
          enum: [DAILY, WEEKLY, MONTHLY, YEARLY]
        paymentIntervalCount:
          type: integer
        planPaymentType:
          type: string
          enum: [RECURRING]
        recurrenceCount:
          type: integer
        trialPeriodDays:
          type: integer
        productReferenceCode:
          type: string
        status:
          type: string
        createdDate:
          type: integer
          format: int64

    CreatePlanRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          required:
            - name
            - productReferenceCode
            - price
            - paymentInterval
            - paymentIntervalCount
            - currencyCode
            - planPaymentType
          properties:
            name:
              type: string
            productReferenceCode:
              type: string
            price:
              type: number
            paymentInterval:
              type: string
              enum: [DAILY, WEEKLY, MONTHLY, YEARLY]
            paymentIntervalCount:
              type: integer
              minimum: 1
            currencyCode:
              type: string
              enum: [TRY, USD, EUR, GBP]
            planPaymentType:
              type: string
              enum: [RECURRING]
            trialPeriodDays:
              type: integer
              minimum: 0
            recurrenceCount:
              type: integer

    UpdatePlanRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          required:
            - name
            - pricingPlanReferenceCode
          properties:
            name:
              type: string
            pricingPlanReferenceCode:
              type: string
            trialPeriodDays:
              type: integer

    PlanResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/PricingPlan'

    PlanListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                currentPage:
                  type: integer
                pageCount:
                  type: integer
                totalCount:
                  type: integer
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/PricingPlan'

    # ==================== SUBSCRIPTION SCHEMAS ====================
    SubscriptionData:
      type: object
      properties:
        referenceCode:
          type: string
        subscriptionReferenceCode:
          type: string
        status:
          type: string

    UpgradeSubscriptionRequest:
      type: object
      required:
        - resetRecurrenceCount
        - upgradePeriod
        - newPricingPlanReferenceCode
      properties:
        resetRecurrenceCount:
          type: boolean
        useTrial:
          type: boolean
        upgradePeriod:
          type: string
        newPricingPlanReferenceCode:
          type: string

    SubscriptionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/SubscriptionData'

    SubscriptionListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                currentPage:
                  type: integer
                pageCount:
                  type: integer
                totalCount:
                  type: integer
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/SubscriptionData'

    # ==================== CHECKOUT SCHEMAS ====================
    InitializeCheckoutRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          required:
            - pricingPlanReferenceCode
            - callbackUrl
            - name
            - surname
            - email
            - gsmNumber
            - identityNumber
          properties:
            pricingPlanReferenceCode:
              type: string
            callbackUrl:
              type: string
              format: uri
            subscriptionInitialStatus:
              type: string
              enum: [PENDING, ACTIVE]
              default: PENDING
            name:
              type: string
            surname:
              type: string
            email:
              type: string
              format: email
            gsmNumber:
              type: string
              description: Turkish phone number (required). Format +90XXXXXXXXXX or 05XXXXXXXXX
              pattern: '^\+?[0-9]{10,15}$'
            identityNumber:
              type: string
              description: Turkish identity number (required). Must be exactly 11 digits
              pattern: '^[0-9]{11}$'
              minLength: 11
              maxLength: 11
            clientReferenceId:
              type: string
              description: Optional client reference ID for tracking checkout sessions in callbacks (similar to Stripe's client_reference_id)
            billingAddress:
              $ref: '#/components/schemas/Address'
            shippingAddress:
              $ref: '#/components/schemas/Address'

    InitializeSubscriptionRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          required:
            - pricingPlanReferenceCode
            - name
            - surname
            - email
            - gsmNumber
            - identityNumber
            - paymentCard
          properties:
            pricingPlanReferenceCode:
              type: string
            subscriptionInitialStatus:
              type: string
              enum: [PENDING, ACTIVE]
              default: ACTIVE
            name:
              type: string
            surname:
              type: string
            email:
              type: string
              format: email
            gsmNumber:
              type: string
              description: Turkish phone number (required). Format +90XXXXXXXXXX or 05XXXXXXXXX
              pattern: '^\+?[0-9]{10,15}$'
            identityNumber:
              type: string
              description: Turkish identity number (required). Must be exactly 11 digits
              pattern: '^[0-9]{11}$'
              minLength: 11
              maxLength: 11
            clientReferenceId:
              type: string
              description: Optional client reference ID for tracking subscription initialization in callbacks (similar to Stripe's client_reference_id)
            billingAddress:
              $ref: '#/components/schemas/Address'
            shippingAddress:
              $ref: '#/components/schemas/Address'
            paymentCard:
              $ref: '#/components/schemas/PaymentCard'

    CardUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          required:
            - callbackUrl
          properties:
            callbackUrl:
              type: string
              format: uri
            subscriptionReferenceCode:
              type: string
            customerReferenceCode:
              type: string

    CheckoutFormResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            clientReferenceId:
              type: string
              description: Client reference ID if provided in the request
            data:
              type: object
              properties:
                token:
                  type: string
                checkoutFormContent:
                  type: string
                tokenExpireTime:
                  type: integer
                  format: int64

    SubscriptionInitResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            clientReferenceId:
              type: string
              description: Client reference ID if provided in the request
            data:
              type: object
              properties:
                subscriptionReferenceCode:
                  type: string
                status:
                  type: string

    # ==================== CUSTOMER SCHEMAS ====================
    UpdateCustomerRequest:
      type: object
      description: Request to update customer information. All fields are optional.
      properties:
        name:
          type: string
          description: Customer first name
        surname:
          type: string
          description: Customer last name
        email:
          type: string
          format: email
          description: Customer email address
        gsmNumber:
          type: string
          description: Customer phone number
        identityNumber:
          type: string
          description: Turkish identity number (TCKN)
        billingAddress:
          $ref: '#/components/schemas/Address'
        shippingAddress:
          $ref: '#/components/schemas/Address'

    CustomerResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Customer'

    CustomerListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                currentPage:
                  type: integer
                pageCount:
                  type: integer
                totalCount:
                  type: integer
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/Customer'

    # ==================== HEALTH SCHEMAS ====================
    BinCheckRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          required:
            - binNumber
          properties:
            binNumber:
              type: string
              pattern: '^\d{6,8}$'
              description: Card BIN number (6-8 digits)

    BinCheckResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                binNumber:
                  type: string
                cardType:
                  type: string
                cardAssociation:
                  type: string
                cardFamily:
                  type: string
                bankName:
                  type: string
                bankCode:
                  type: integer
                commercial:
                  type: integer

  responses:
    BadRequestError:
      description: Bad request - Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
          example:
            status: failure
            errorCode: 5001
            errorMessage: Invalid request parameters
            errorGroup: VALIDATION_ERROR
    
    UnauthorizedError:
      description: Unauthorized - Invalid API credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
          example:
            status: failure
            errorCode: 1001
            errorMessage: Authentication failed
            errorGroup: AUTHENTICATION_ERROR
    
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
          example:
            status: failure
            errorCode: 404
            errorMessage: Resource not found
            errorGroup: NOT_FOUND_ERROR
    
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
          example:
            status: failure
            errorCode: 500
            errorMessage: Internal server error
            errorGroup: SERVER_ERROR
